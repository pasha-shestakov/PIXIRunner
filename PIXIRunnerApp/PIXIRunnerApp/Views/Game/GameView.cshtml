@model Game
@{
    ViewData["Title"] = Model.name;
    var saves = ViewData["saves"] as List<SaveState>;
    var userID = ViewData["userID"] as String;
    var userName = ViewData["userName"] as String;

}

<h3 class="ArcadeFont">@Model.name</h3>
<div id="@Model.gameID" class="cont">
    <div id="gameCont">
        <canvas id="canvasOverlay"></canvas>
        <canvas id="gameBody"></canvas>
    </div>
    <div class="_overlay" id="store">
        <input class="closeBtn" id="closeStoreBtn" type="image" src="~/Games/1/images/UI/closeBtn.png" />
        <img class="store_background" src="~/Games/1/images/store/background.jpg" />
        <h5 class="ArcadeFont" id="storeHelp">Hover over doors to see the skins. The White Monster costs 10 coins, the Blue Monster costs 20. Click to purchase and set your skin.</h5>
        <div id="store_grid">
        </div>
    </div>
    <div class="_overlay" id="settings">
        <input class="closeBtn" id="closeSettingsBtn" type="image" src="~/Games/1/images/UI/closeBtn.png" />
        <h1 class="ArcadeFont">Settings</h1>

        <h4 class="ArcadeFont">Volume</h4>
        <div class="form-group">
            <input id="disabled" type="checkbox" />
            <label class="form-check-label ArcadeFont" for="disabled">Disable Sounds</label>
        </div>
        <div class="form-group slidecontainer">
            <label class="form-check-label ArcadeFont" for="musicSlider">Music</label>
            <input id="musicSlider" class="slider" type="range" min="0" max="1" step="0.1">
        </div>
        <div class="form-group slidecontainer">
            <label class="form-check-label ArcadeFont" for="effectsSlider">Sound Effects</label>
            <input id="effectsSlider" class="slider" type="range" min="0" max="1" step="0.1">
        </div>
    </div>

    <div id="launcher">

        <select id="save_states">
            <option value="0">New Game</option>
            @if (saves != null)
            {
                @foreach (var save in saves)
                {
                    <option value="@save.saveStateID">Load Save @save.saveStateID</option>
                }
            }
        </select>
        <button id="play">Play</button>


    </div>
</div>

<div id="reviewEntry">
    <h4>@userName's Game Review:</h4>
    Rating (between 1 and 5): <input type="number" id="rating" min="1" max="5">
    <br />
    <br />
    <textarea id="review" name="message" rows="2" cols="50" style="margin-top: 0px;margin-bottom: 0px;height: 98px;width: 1000px;"></textarea>
    <br />
    <button id="submitReview" class="btn btn-primary">Save</button>
    Last Saved:
    <span id="timeStamp"></span>
</div>


<div id="gameReviews">
    <h4>Other reviews for this game:</h4>
    @*<div class="review" id="review0">
            <h6>December 5th, 2019 7:39PM.</h6>
            <span>"I thought this game sucked. The controls were wonky. etc. I wouldn't reccomend this"</span>
            <br />
            <h6>Rating: 1 out of 5 stars.</h6>
        </div>
        <br />*@
</div>


@section Scripts
{
    <script src="/lib/matter-js/matter.min.js"></script>
    <script type="module" src="@("/Games/" + Model.gameID + "/js/gameSounds.js")"></script>
    <script type="module" src="@("/Games/" + Model.gameID + "/js/game_controller.js")"></script>

    <script>
        //Initializes the tinymce text editor
        //Source: https://www.tiny.cloud/docs/
        tinymce.init({
            selector: '#review',
        });


        $('#submitReview').click(submitReview);

        //Makes an AJAX post request to the server for submitting/altering a review
        function submitReview() {
            const content = tinyMCE.get('review').getContent({ format: 'raw' });
            var rating = document.getElementById('rating').value;

            //TODO: validate tinymce for no content

            if (rating == null || rating == '') {
                swal({
                    title: "Please enter a rating.",
                    text: "The rating must be a number from 1 to 5.",
                    icon: "error"
                });
                return;
            }

            console.log(content + ' ' + rating)

            //Source: https://api.jquery.com/
            $.ajax({
                type: "POST",
                url: "/Review/SetReview",
                data: {
                    gameID: @Model.gameID,
                    userID: '@userID',
                    text: content,
                    rating: rating
                },
                dataType: 'json',
                success: function (data) {
                    const timeStamp = document.getElementById("timeStamp");
                    timeStamp.innerHTML = moment(data.date).format("LLL");

                    if (data.success) {
                        // create new review
                        const gameReviews = document.getElementById("gameReviews");
                        var reviewHTML = '<div class="review" id="review' + data.reviewID + '"><p>' + moment(data.date).format("LLL") + '</p><span>' + data.text + '</span><br /><p>Rating: ' + data.rating + ' out of 5 stars.</p></div><br />';
                        gameReviews.innerHTML += reviewHTML;
                    } else {
                        // alter existing
                        const reviewBox = document.getElementById('review' + data.reviewID);
                        var reviewHTML = '<p>' + moment(data.date).format("LLL") + '</p><span>' + data.text + '</span><br /><p>Rating: ' + data.rating + ' out of 5 stars.</p>';
                        reviewBox.innerHTML = reviewHTML;
                    }

                },
                error: function (request, error) {
                    alert("Request: " + JSON.stringify(request));
                }
            })
        }

        window.onload = function() {
            //Source: https://api.jquery.com/
            $.ajax({
                type: "GET",
                url: "/Review/GetReview",
                data: {
                    gameID: @Model.gameID,
                    userID: '@userID',
                },
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        tinyMCE.get('review').setContent(data.text);

                        const rating = document.getElementById("rating");
                        rating.value = data.rating;

                        const timeStamp = document.getElementById("timeStamp");
                        timeStamp.innerHTML = moment(data.date).format("LLL");
                    }
                },
                error: function (request, error) {
                    alert("Request: " + JSON.stringify(request));
                }
            })

             $.ajax({
                type: "GET",
                url: "/Review/GetGameReviews",
                data: {
                    gameID: @Model.gameID,
                },
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        var reviews = JSON.parse(data.reviews);
                        console.log(reviews);
                        const gameReviews = document.getElementById("gameReviews");
                        for (var i = 0; i < reviews.length; i++) {
                            var htmlAdd = '<div class="review" id="review' + reviews[i].ID + '"><p>' + moment(reviews[i].Date).format("LLL") + '</p><span>' + reviews[i].Text + '</span><br /><p>Rating: ' + reviews[i].Rating + ' out of 5 stars.</p></div><br />';
                            gameReviews.innerHTML += htmlAdd;
                        }
                    }
                },
                error: function (request, error) {
                    alert("Request: " + JSON.stringify(request));
                }
            })

        }

    </script>
}


